<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
        http://www.springframework.org/schema/tx  
        http://www.springframework.org/schema/tx/spring-tx-3.0.xsd ">

    <!-- 数据源配置方式1:导入redis属性文件 -->
    <!--<context:property-placeholder location="classpath:release/redis.properties" />-->

    <bean
            id="jedisPoolConfig"
            class="redis.clients.jedis.JedisPoolConfig">
        <property name="minEvictableIdleTimeMillis" value="${redis.pool.maxActive}"/>
        <property name="maxIdle" value="${redis.pool.maxIdle}"/>
        <property name="maxWaitMillis" value="${redis.pool.maxWait}"/>
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
    </bean>


    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">

        <property  name="hostName" value="${redis.ip}"/>

        <property name="port" value="${redis.port}"/>

        <property name="password" value="${redis.password}"></property>

        <property  name="poolConfig" ref="jedisPoolConfig"/>
    </bean>

    <bean class="org.springframework.data.redis.core.RedisTemplate" >
        <property name="connectionFactory" ref="jedisConnectionFactory"></property>
    </bean>

    <!--add by xiongzhao 扫描切面 -->
    <context:component-scan base-package="com.ivydad.rest.demo.aspect" />

    <!-- spring AOP切面配置,启动对@AspectJ注解的支持,add by xiongzhao -->
    <!-- proxy-target-class等于true是强制使用cglib代理，proxy-target-class默认是false，如果你的类实现了接口 就走JDK代理，如果没有，走cglib代理  -->
    <!-- 注：对于单利模式建议使用cglib代理，虽然JDK动态代理比cglib代理速度快，但性能不如cglib -->
    <!--如果切面切的是控制层，配置要写在spring-mvc的配置文件里,坑 -_-# -->
    <!-- expose-proxy="true"作用,支持通过Aop上下文获取当前动态代理对象,解决方法嵌套aop不起作用的问题,如((AService) AopContext.currentProxy()).b(),解决方案二:也可以在类中注入自身来调用-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <bean id="redisLock" class="com.ivydad.rest.demo.test.RedisLock" scope="singleton">
        <!-- 轮询获取锁的超时时间 -->
        <property name="timeOut" value="60000"></property>
        <!-- 锁在缓存中的失效时间 -->
        <property name="expireTime" value="120000"></property>
        <!-- 轮询获取锁的时间间隔 -->
        <property name="pollingInterval" value="100"></property>
    </bean>

</beans>